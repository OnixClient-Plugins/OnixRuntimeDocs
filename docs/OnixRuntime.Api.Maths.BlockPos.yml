### YamlMime:ManagedReference
items:
- uid: OnixRuntime.Api.Maths.BlockPos
  commentId: T:OnixRuntime.Api.Maths.BlockPos
  id: BlockPos
  parent: OnixRuntime.Api.Maths
  children:
  - OnixRuntime.Api.Maths.BlockPos.#ctor(OnixRuntime.Api.Maths.Vec3)
  - OnixRuntime.Api.Maths.BlockPos.#ctor(System.Int32,System.Int32,System.Int32)
  - OnixRuntime.Api.Maths.BlockPos.Add(OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.Add(System.Int32,System.Int32,System.Int32)
  - OnixRuntime.Api.Maths.BlockPos.BoundingBox
  - OnixRuntime.Api.Maths.BlockPos.Center
  - OnixRuntime.Api.Maths.BlockPos.Clamp(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.Clamp(System.Int32,System.Int32)
  - OnixRuntime.Api.Maths.BlockPos.Distance(OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.Div(OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.Div(System.Int32,System.Int32,System.Int32)
  - OnixRuntime.Api.Maths.BlockPos.Down
  - OnixRuntime.Api.Maths.BlockPos.East
  - OnixRuntime.Api.Maths.BlockPos.Equals(OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.Equals(System.Object)
  - OnixRuntime.Api.Maths.BlockPos.GetHashCode
  - OnixRuntime.Api.Maths.BlockPos.Length
  - OnixRuntime.Api.Maths.BlockPos.Lerp(OnixRuntime.Api.Maths.BlockPos,System.Single)
  - OnixRuntime.Api.Maths.BlockPos.Max(OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.Max(System.Int32)
  - OnixRuntime.Api.Maths.BlockPos.Min(OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.Min(System.Int32)
  - OnixRuntime.Api.Maths.BlockPos.Mod(OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.Mod(System.Int32,System.Int32,System.Int32)
  - OnixRuntime.Api.Maths.BlockPos.Mul(OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.Mul(System.Int32,System.Int32,System.Int32)
  - OnixRuntime.Api.Maths.BlockPos.Next(OnixRuntime.Api.World.BlockFace,System.Int32)
  - OnixRuntime.Api.Maths.BlockPos.Normalized
  - OnixRuntime.Api.Maths.BlockPos.North
  - OnixRuntime.Api.Maths.BlockPos.One
  - OnixRuntime.Api.Maths.BlockPos.South
  - OnixRuntime.Api.Maths.BlockPos.Sub(OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.Sub(System.Int32,System.Int32,System.Int32)
  - OnixRuntime.Api.Maths.BlockPos.ToString
  - OnixRuntime.Api.Maths.BlockPos.ToString(System.String)
  - OnixRuntime.Api.Maths.BlockPos.Up
  - OnixRuntime.Api.Maths.BlockPos.West
  - OnixRuntime.Api.Maths.BlockPos.X
  - OnixRuntime.Api.Maths.BlockPos.Y
  - OnixRuntime.Api.Maths.BlockPos.Z
  - OnixRuntime.Api.Maths.BlockPos.Zero
  - OnixRuntime.Api.Maths.BlockPos.op_Addition(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.op_Decrement(OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.op_Division(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.op_Division(OnixRuntime.Api.Maths.BlockPos,System.Int32)
  - OnixRuntime.Api.Maths.BlockPos.op_Division(System.Int32,OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.op_Equality(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.op_GreaterThan(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.op_GreaterThanOrEqual(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.op_Increment(OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.op_Inequality(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.op_LessThan(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.op_LessThanOrEqual(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.op_Modulus(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.op_Modulus(OnixRuntime.Api.Maths.BlockPos,System.Int32)
  - OnixRuntime.Api.Maths.BlockPos.op_Modulus(System.Int32,OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.op_Multiply(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.op_Multiply(OnixRuntime.Api.Maths.BlockPos,System.Int32)
  - OnixRuntime.Api.Maths.BlockPos.op_Multiply(System.Int32,OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.op_Subtraction(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.op_UnaryNegation(OnixRuntime.Api.Maths.BlockPos)
  - OnixRuntime.Api.Maths.BlockPos.op_UnaryPlus(OnixRuntime.Api.Maths.BlockPos)
  langs:
  - csharp
  - vb
  name: BlockPos
  nameWithType: BlockPos
  fullName: OnixRuntime.Api.Maths.BlockPos
  type: Struct
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: BlockPos
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 8
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Represents a block position in 3D integer coordinates, with vector-like operations and utilities.
  example: []
  syntax:
    content: 'public struct BlockPos : IEquatable<BlockPos>'
    content.vb: Public Structure BlockPos Implements IEquatable(Of BlockPos)
  implements:
  - System.IEquatable{OnixRuntime.Api.Maths.BlockPos}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: OnixRuntime.Api.Maths.BlockPos.X
  commentId: F:OnixRuntime.Api.Maths.BlockPos.X
  id: X
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: X
  nameWithType: BlockPos.X
  fullName: OnixRuntime.Api.Maths.BlockPos.X
  type: Field
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: X
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 12
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: The X coordinate of the block position.
  example: []
  syntax:
    content: public int X
    return:
      type: System.Int32
    content.vb: Public X As Integer
- uid: OnixRuntime.Api.Maths.BlockPos.Y
  commentId: F:OnixRuntime.Api.Maths.BlockPos.Y
  id: Y
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: BlockPos.Y
  fullName: OnixRuntime.Api.Maths.BlockPos.Y
  type: Field
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Y
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 16
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: The Y coordinate of the block position.
  example: []
  syntax:
    content: public int Y
    return:
      type: System.Int32
    content.vb: Public Y As Integer
- uid: OnixRuntime.Api.Maths.BlockPos.Z
  commentId: F:OnixRuntime.Api.Maths.BlockPos.Z
  id: Z
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Z
  nameWithType: BlockPos.Z
  fullName: OnixRuntime.Api.Maths.BlockPos.Z
  type: Field
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Z
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 20
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: The Z coordinate of the block position.
  example: []
  syntax:
    content: public int Z
    return:
      type: System.Int32
    content.vb: Public Z As Integer
- uid: OnixRuntime.Api.Maths.BlockPos.#ctor(System.Int32,System.Int32,System.Int32)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.#ctor(System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32)'
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: BlockPos(int, int, int)
  nameWithType: BlockPos.BlockPos(int, int, int)
  fullName: OnixRuntime.Api.Maths.BlockPos.BlockPos(int, int, int)
  type: Constructor
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: .ctor
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 28
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Initializes a new instance of the <xref href="OnixRuntime.Api.Maths.BlockPos" data-throw-if-not-resolved="false"></xref> struct with the specified coordinates.
  example: []
  syntax:
    content: public BlockPos(int x, int y, int z)
    parameters:
    - id: x
      type: System.Int32
      description: The X coordinate.
    - id: y
      type: System.Int32
      description: The Y coordinate.
    - id: z
      type: System.Int32
      description: The Z coordinate.
    content.vb: Public Sub New(x As Integer, y As Integer, z As Integer)
  overload: OnixRuntime.Api.Maths.BlockPos.#ctor*
  nameWithType.vb: BlockPos.New(Integer, Integer, Integer)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.New(Integer, Integer, Integer)
  name.vb: New(Integer, Integer, Integer)
- uid: OnixRuntime.Api.Maths.BlockPos.#ctor(OnixRuntime.Api.Maths.Vec3)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.#ctor(OnixRuntime.Api.Maths.Vec3)
  id: '#ctor(OnixRuntime.Api.Maths.Vec3)'
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: BlockPos(Vec3)
  nameWithType: BlockPos.BlockPos(Vec3)
  fullName: OnixRuntime.Api.Maths.BlockPos.BlockPos(OnixRuntime.Api.Maths.Vec3)
  type: Constructor
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: .ctor
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 38
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Initializes a new instance of the <xref href="OnixRuntime.Api.Maths.BlockPos" data-throw-if-not-resolved="false"></xref> struct from a <xref href="OnixRuntime.Api.Maths.Vec3" data-throw-if-not-resolved="false"></xref> by flooring its components.
  example: []
  syntax:
    content: public BlockPos(Vec3 vec)
    parameters:
    - id: vec
      type: OnixRuntime.Api.Maths.Vec3
      description: The vector to convert.
    content.vb: Public Sub New(vec As Vec3)
  overload: OnixRuntime.Api.Maths.BlockPos.#ctor*
  nameWithType.vb: BlockPos.New(Vec3)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.New(OnixRuntime.Api.Maths.Vec3)
  name.vb: New(Vec3)
- uid: OnixRuntime.Api.Maths.BlockPos.Add(System.Int32,System.Int32,System.Int32)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Add(System.Int32,System.Int32,System.Int32)
  id: Add(System.Int32,System.Int32,System.Int32)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Add(int, int, int)
  nameWithType: BlockPos.Add(int, int, int)
  fullName: OnixRuntime.Api.Maths.BlockPos.Add(int, int, int)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Add
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 51
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Returns a new BlockPos by adding the specified values to each coordinate.
  example: []
  syntax:
    content: public BlockPos Add(int x, int y, int z)
    parameters:
    - id: x
      type: System.Int32
      description: The X coordinate to add.
    - id: y
      type: System.Int32
      description: The Y coordinate to add.
    - id: z
      type: System.Int32
      description: The Z coordinate to add.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the added coordinates.
    content.vb: Public Function Add(x As Integer, y As Integer, z As Integer) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Add*
  nameWithType.vb: BlockPos.Add(Integer, Integer, Integer)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.Add(Integer, Integer, Integer)
  name.vb: Add(Integer, Integer, Integer)
- uid: OnixRuntime.Api.Maths.BlockPos.Add(OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Add(OnixRuntime.Api.Maths.BlockPos)
  id: Add(OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Add(BlockPos)
  nameWithType: BlockPos.Add(BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.Add(OnixRuntime.Api.Maths.BlockPos)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Add
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 60
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Returns a new BlockPos by adding another BlockPos.
  example: []
  syntax:
    content: public BlockPos Add(BlockPos rhs)
    parameters:
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The BlockPos to add.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the added coordinates.
    content.vb: Public Function Add(rhs As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Add*
- uid: OnixRuntime.Api.Maths.BlockPos.op_Addition(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_Addition(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  id: op_Addition(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator +(BlockPos, BlockPos)
  nameWithType: BlockPos.operator +(BlockPos, BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator +(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_Addition
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 70
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Adds two BlockPos values.
  example: []
  syntax:
    content: public static BlockPos operator +(BlockPos lhs, BlockPos rhs)
    parameters:
    - id: lhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The left-hand side BlockPos.
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The right-hand side BlockPos.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the added coordinates.
    content.vb: Public Shared Operator +(lhs As BlockPos, rhs As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.op_Addition*
  nameWithType.vb: BlockPos.+(BlockPos, BlockPos)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.+(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  name.vb: +(BlockPos, BlockPos)
- uid: OnixRuntime.Api.Maths.BlockPos.Sub(System.Int32,System.Int32,System.Int32)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Sub(System.Int32,System.Int32,System.Int32)
  id: Sub(System.Int32,System.Int32,System.Int32)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Sub(int, int, int)
  nameWithType: BlockPos.Sub(int, int, int)
  fullName: OnixRuntime.Api.Maths.BlockPos.Sub(int, int, int)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Sub
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 81
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Returns a new BlockPos by subtracting the specified values from each coordinate.
  example: []
  syntax:
    content: public BlockPos Sub(int x, int y, int z)
    parameters:
    - id: x
      type: System.Int32
      description: The X coordinate to subtract.
    - id: y
      type: System.Int32
      description: The Y coordinate to subtract.
    - id: z
      type: System.Int32
      description: The Z coordinate to subtract.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the subtracted coordinates.
    content.vb: Public Function [Sub](x As Integer, y As Integer, z As Integer) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Sub*
  nameWithType.vb: BlockPos.Sub(Integer, Integer, Integer)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.Sub(Integer, Integer, Integer)
  name.vb: Sub(Integer, Integer, Integer)
- uid: OnixRuntime.Api.Maths.BlockPos.Sub(OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Sub(OnixRuntime.Api.Maths.BlockPos)
  id: Sub(OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Sub(BlockPos)
  nameWithType: BlockPos.Sub(BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.Sub(OnixRuntime.Api.Maths.BlockPos)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Sub
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 90
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Returns a new BlockPos by subtracting another BlockPos.
  example: []
  syntax:
    content: public BlockPos Sub(BlockPos rhs)
    parameters:
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The BlockPos to subtract.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the subtracted coordinates.
    content.vb: Public Function [Sub](rhs As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Sub*
- uid: OnixRuntime.Api.Maths.BlockPos.op_Subtraction(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_Subtraction(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  id: op_Subtraction(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator -(BlockPos, BlockPos)
  nameWithType: BlockPos.operator -(BlockPos, BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator -(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_Subtraction
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 100
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Subtracts one BlockPos from another.
  example: []
  syntax:
    content: public static BlockPos operator -(BlockPos lhs, BlockPos rhs)
    parameters:
    - id: lhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The left-hand side BlockPos.
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The right-hand side BlockPos.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the subtracted coordinates.
    content.vb: Public Shared Operator -(lhs As BlockPos, rhs As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.op_Subtraction*
  nameWithType.vb: BlockPos.-(BlockPos, BlockPos)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.-(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  name.vb: -(BlockPos, BlockPos)
- uid: OnixRuntime.Api.Maths.BlockPos.Mul(System.Int32,System.Int32,System.Int32)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Mul(System.Int32,System.Int32,System.Int32)
  id: Mul(System.Int32,System.Int32,System.Int32)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Mul(int, int, int)
  nameWithType: BlockPos.Mul(int, int, int)
  fullName: OnixRuntime.Api.Maths.BlockPos.Mul(int, int, int)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Mul
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 111
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Returns a new BlockPos by multiplying the specified values with each coordinate.
  example: []
  syntax:
    content: public BlockPos Mul(int x, int y, int z)
    parameters:
    - id: x
      type: System.Int32
      description: The X coordinate to multiply.
    - id: y
      type: System.Int32
      description: The Y coordinate to multiply.
    - id: z
      type: System.Int32
      description: The Z coordinate to multiply.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the multiplied coordinates.
    content.vb: Public Function Mul(x As Integer, y As Integer, z As Integer) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Mul*
  nameWithType.vb: BlockPos.Mul(Integer, Integer, Integer)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.Mul(Integer, Integer, Integer)
  name.vb: Mul(Integer, Integer, Integer)
- uid: OnixRuntime.Api.Maths.BlockPos.Mul(OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Mul(OnixRuntime.Api.Maths.BlockPos)
  id: Mul(OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Mul(BlockPos)
  nameWithType: BlockPos.Mul(BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.Mul(OnixRuntime.Api.Maths.BlockPos)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Mul
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 120
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Returns a new BlockPos by multiplying another BlockPos.
  example: []
  syntax:
    content: public BlockPos Mul(BlockPos rhs)
    parameters:
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The BlockPos to multiply.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the multiplied coordinates.
    content.vb: Public Function Mul(rhs As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Mul*
- uid: OnixRuntime.Api.Maths.BlockPos.op_Multiply(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_Multiply(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  id: op_Multiply(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator *(BlockPos, BlockPos)
  nameWithType: BlockPos.operator *(BlockPos, BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator *(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_Multiply
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 130
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Multiplies two BlockPos values.
  example: []
  syntax:
    content: public static BlockPos operator *(BlockPos lhs, BlockPos rhs)
    parameters:
    - id: lhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The left-hand side BlockPos.
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The right-hand side BlockPos.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the multiplied coordinates.
    content.vb: Public Shared Operator *(lhs As BlockPos, rhs As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.op_Multiply*
  nameWithType.vb: BlockPos.*(BlockPos, BlockPos)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.*(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  name.vb: '*(BlockPos, BlockPos)'
- uid: OnixRuntime.Api.Maths.BlockPos.Div(System.Int32,System.Int32,System.Int32)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Div(System.Int32,System.Int32,System.Int32)
  id: Div(System.Int32,System.Int32,System.Int32)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Div(int, int, int)
  nameWithType: BlockPos.Div(int, int, int)
  fullName: OnixRuntime.Api.Maths.BlockPos.Div(int, int, int)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Div
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 141
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Returns a new BlockPos by dividing the specified values from each coordinate.
  example: []
  syntax:
    content: public BlockPos Div(int x, int y, int z)
    parameters:
    - id: x
      type: System.Int32
      description: The X coordinate to divide.
    - id: y
      type: System.Int32
      description: The Y coordinate to divide.
    - id: z
      type: System.Int32
      description: The Z coordinate to divide.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the divided coordinates.
    content.vb: Public Function Div(x As Integer, y As Integer, z As Integer) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Div*
  nameWithType.vb: BlockPos.Div(Integer, Integer, Integer)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.Div(Integer, Integer, Integer)
  name.vb: Div(Integer, Integer, Integer)
- uid: OnixRuntime.Api.Maths.BlockPos.Div(OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Div(OnixRuntime.Api.Maths.BlockPos)
  id: Div(OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Div(BlockPos)
  nameWithType: BlockPos.Div(BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.Div(OnixRuntime.Api.Maths.BlockPos)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Div
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 150
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Returns a new BlockPos by dividing another BlockPos.
  example: []
  syntax:
    content: public BlockPos Div(BlockPos rhs)
    parameters:
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The BlockPos to divide.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the divided coordinates.
    content.vb: Public Function Div(rhs As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Div*
- uid: OnixRuntime.Api.Maths.BlockPos.op_Division(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_Division(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  id: op_Division(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator /(BlockPos, BlockPos)
  nameWithType: BlockPos.operator /(BlockPos, BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator /(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_Division
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 160
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Divides one BlockPos by another.
  example: []
  syntax:
    content: public static BlockPos operator /(BlockPos lhs, BlockPos rhs)
    parameters:
    - id: lhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The left-hand side BlockPos.
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The right-hand side BlockPos.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the divided coordinates.
    content.vb: Public Shared Operator /(lhs As BlockPos, rhs As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.op_Division*
  nameWithType.vb: BlockPos./(BlockPos, BlockPos)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos./(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  name.vb: /(BlockPos, BlockPos)
- uid: OnixRuntime.Api.Maths.BlockPos.Mod(System.Int32,System.Int32,System.Int32)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Mod(System.Int32,System.Int32,System.Int32)
  id: Mod(System.Int32,System.Int32,System.Int32)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Mod(int, int, int)
  nameWithType: BlockPos.Mod(int, int, int)
  fullName: OnixRuntime.Api.Maths.BlockPos.Mod(int, int, int)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Mod
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 171
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Returns a new BlockPos by taking the modulus of the specified values with each coordinate.
  example: []
  syntax:
    content: public BlockPos Mod(int x, int y, int z)
    parameters:
    - id: x
      type: System.Int32
      description: The X coordinate to mod.
    - id: y
      type: System.Int32
      description: The Y coordinate to mod.
    - id: z
      type: System.Int32
      description: The Z coordinate to mod.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the modded coordinates.
    content.vb: Public Function [Mod](x As Integer, y As Integer, z As Integer) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Mod*
  nameWithType.vb: BlockPos.Mod(Integer, Integer, Integer)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.Mod(Integer, Integer, Integer)
  name.vb: Mod(Integer, Integer, Integer)
- uid: OnixRuntime.Api.Maths.BlockPos.Mod(OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Mod(OnixRuntime.Api.Maths.BlockPos)
  id: Mod(OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Mod(BlockPos)
  nameWithType: BlockPos.Mod(BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.Mod(OnixRuntime.Api.Maths.BlockPos)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Mod
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 180
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Returns a new BlockPos by taking the modulus of another BlockPos.
  example: []
  syntax:
    content: public BlockPos Mod(BlockPos rhs)
    parameters:
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The BlockPos to mod.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the modded coordinates.
    content.vb: Public Function [Mod](rhs As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Mod*
- uid: OnixRuntime.Api.Maths.BlockPos.op_Modulus(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_Modulus(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  id: op_Modulus(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator %(BlockPos, BlockPos)
  nameWithType: BlockPos.operator %(BlockPos, BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator %(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_Modulus
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 190
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Takes the modulus of one BlockPos with another.
  example: []
  syntax:
    content: public static BlockPos operator %(BlockPos lhs, BlockPos rhs)
    parameters:
    - id: lhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The left-hand side BlockPos.
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The right-hand side BlockPos.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the modded coordinates.
    content.vb: Public Shared Operator Mod(lhs As BlockPos, rhs As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.op_Modulus*
  nameWithType.vb: BlockPos.Mod(BlockPos, BlockPos)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.Mod(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  name.vb: Mod(BlockPos, BlockPos)
- uid: OnixRuntime.Api.Maths.BlockPos.op_Equality(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_Equality(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  id: op_Equality(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator ==(BlockPos, BlockPos)
  nameWithType: BlockPos.operator ==(BlockPos, BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator ==(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_Equality
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 200
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Checks if two BlockPos values are equal.
  example: []
  syntax:
    content: public static bool operator ==(BlockPos lhs, BlockPos rhs)
    parameters:
    - id: lhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The left-hand side BlockPos.
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The right-hand side BlockPos.
    return:
      type: System.Boolean
      description: True if the coordinates are equal, otherwise false.
    content.vb: Public Shared Operator =(lhs As BlockPos, rhs As BlockPos) As Boolean
  overload: OnixRuntime.Api.Maths.BlockPos.op_Equality*
  nameWithType.vb: BlockPos.=(BlockPos, BlockPos)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.=(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  name.vb: =(BlockPos, BlockPos)
- uid: OnixRuntime.Api.Maths.BlockPos.op_Inequality(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_Inequality(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  id: op_Inequality(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator !=(BlockPos, BlockPos)
  nameWithType: BlockPos.operator !=(BlockPos, BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator !=(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_Inequality
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 210
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Checks if two BlockPos values are not equal.
  example: []
  syntax:
    content: public static bool operator !=(BlockPos lhs, BlockPos rhs)
    parameters:
    - id: lhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The left-hand side BlockPos.
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The right-hand side BlockPos.
    return:
      type: System.Boolean
      description: True if the coordinates are not equal, otherwise false.
    content.vb: Public Shared Operator <>(lhs As BlockPos, rhs As BlockPos) As Boolean
  overload: OnixRuntime.Api.Maths.BlockPos.op_Inequality*
  nameWithType.vb: BlockPos.<>(BlockPos, BlockPos)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.<>(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  name.vb: <>(BlockPos, BlockPos)
- uid: OnixRuntime.Api.Maths.BlockPos.op_GreaterThan(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_GreaterThan(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  id: op_GreaterThan(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator >(BlockPos, BlockPos)
  nameWithType: BlockPos.operator >(BlockPos, BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator >(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_GreaterThan
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 220
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Checks if one BlockPos is greater than another.
  example: []
  syntax:
    content: public static bool operator >(BlockPos lhs, BlockPos rhs)
    parameters:
    - id: lhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The left-hand side BlockPos.
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The right-hand side BlockPos.
    return:
      type: System.Boolean
      description: True if the left-hand side is greater, otherwise false.
    content.vb: Public Shared Operator >(lhs As BlockPos, rhs As BlockPos) As Boolean
  overload: OnixRuntime.Api.Maths.BlockPos.op_GreaterThan*
  nameWithType.vb: BlockPos.>(BlockPos, BlockPos)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.>(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  name.vb: '>(BlockPos, BlockPos)'
- uid: OnixRuntime.Api.Maths.BlockPos.op_LessThan(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_LessThan(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  id: op_LessThan(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator <(BlockPos, BlockPos)
  nameWithType: BlockPos.operator <(BlockPos, BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator <(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_LessThan
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 230
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Checks if one BlockPos is less than another.
  example: []
  syntax:
    content: public static bool operator <(BlockPos lhs, BlockPos rhs)
    parameters:
    - id: lhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The left-hand side BlockPos.
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The right-hand side BlockPos.
    return:
      type: System.Boolean
      description: True if the left-hand side is less, otherwise false.
    content.vb: Public Shared Operator <(lhs As BlockPos, rhs As BlockPos) As Boolean
  overload: OnixRuntime.Api.Maths.BlockPos.op_LessThan*
  nameWithType.vb: BlockPos.<(BlockPos, BlockPos)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.<(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  name.vb: <(BlockPos, BlockPos)
- uid: OnixRuntime.Api.Maths.BlockPos.op_GreaterThanOrEqual(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_GreaterThanOrEqual(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  id: op_GreaterThanOrEqual(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator >=(BlockPos, BlockPos)
  nameWithType: BlockPos.operator >=(BlockPos, BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator >=(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_GreaterThanOrEqual
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 240
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Checks if one BlockPos is greater than or equal to another.
  example: []
  syntax:
    content: public static bool operator >=(BlockPos lhs, BlockPos rhs)
    parameters:
    - id: lhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The left-hand side BlockPos.
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The right-hand side BlockPos.
    return:
      type: System.Boolean
      description: True if the left-hand side is greater than or equal, otherwise false.
    content.vb: Public Shared Operator >=(lhs As BlockPos, rhs As BlockPos) As Boolean
  overload: OnixRuntime.Api.Maths.BlockPos.op_GreaterThanOrEqual*
  nameWithType.vb: BlockPos.>=(BlockPos, BlockPos)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.>=(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  name.vb: '>=(BlockPos, BlockPos)'
- uid: OnixRuntime.Api.Maths.BlockPos.op_LessThanOrEqual(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_LessThanOrEqual(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  id: op_LessThanOrEqual(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator <=(BlockPos, BlockPos)
  nameWithType: BlockPos.operator <=(BlockPos, BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator <=(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_LessThanOrEqual
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 250
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Checks if one BlockPos is less than or equal to another.
  example: []
  syntax:
    content: public static bool operator <=(BlockPos lhs, BlockPos rhs)
    parameters:
    - id: lhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The left-hand side BlockPos.
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The right-hand side BlockPos.
    return:
      type: System.Boolean
      description: True if the left-hand side is less than or equal, otherwise false.
    content.vb: Public Shared Operator <=(lhs As BlockPos, rhs As BlockPos) As Boolean
  overload: OnixRuntime.Api.Maths.BlockPos.op_LessThanOrEqual*
  nameWithType.vb: BlockPos.<=(BlockPos, BlockPos)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.<=(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  name.vb: <=(BlockPos, BlockPos)
- uid: OnixRuntime.Api.Maths.BlockPos.op_UnaryNegation(OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_UnaryNegation(OnixRuntime.Api.Maths.BlockPos)
  id: op_UnaryNegation(OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator -(BlockPos)
  nameWithType: BlockPos.operator -(BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator -(OnixRuntime.Api.Maths.BlockPos)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_UnaryNegation
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 259
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Negates the coordinates of a BlockPos.
  example: []
  syntax:
    content: public static BlockPos operator -(BlockPos rhs)
    parameters:
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The BlockPos to negate.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the negated coordinates.
    content.vb: Public Shared Operator -(rhs As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.op_UnaryNegation*
  nameWithType.vb: BlockPos.-(BlockPos)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.-(OnixRuntime.Api.Maths.BlockPos)
  name.vb: -(BlockPos)
- uid: OnixRuntime.Api.Maths.BlockPos.op_UnaryPlus(OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_UnaryPlus(OnixRuntime.Api.Maths.BlockPos)
  id: op_UnaryPlus(OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator +(BlockPos)
  nameWithType: BlockPos.operator +(BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator +(OnixRuntime.Api.Maths.BlockPos)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_UnaryPlus
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 268
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Returns the same BlockPos.
  example: []
  syntax:
    content: public static BlockPos operator +(BlockPos rhs)
    parameters:
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The BlockPos.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: The same BlockPos.
    content.vb: Public Shared Operator +(rhs As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.op_UnaryPlus*
  nameWithType.vb: BlockPos.+(BlockPos)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.+(OnixRuntime.Api.Maths.BlockPos)
  name.vb: +(BlockPos)
- uid: OnixRuntime.Api.Maths.BlockPos.op_Increment(OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_Increment(OnixRuntime.Api.Maths.BlockPos)
  id: op_Increment(OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator ++(BlockPos)
  nameWithType: BlockPos.operator ++(BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator ++(OnixRuntime.Api.Maths.BlockPos)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_Increment
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 277
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Increments the coordinates of a BlockPos by 1.
  example: []
  syntax:
    content: public static BlockPos operator ++(BlockPos rhs)
    parameters:
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The BlockPos to increment.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the incremented coordinates.
    content.vb: Public Shared Function op_Increment(rhs As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.op_Increment*
  nameWithType.vb: BlockPos.op_Increment(BlockPos)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.op_Increment(OnixRuntime.Api.Maths.BlockPos)
  name.vb: op_Increment(BlockPos)
- uid: OnixRuntime.Api.Maths.BlockPos.op_Decrement(OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_Decrement(OnixRuntime.Api.Maths.BlockPos)
  id: op_Decrement(OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator --(BlockPos)
  nameWithType: BlockPos.operator --(BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator --(OnixRuntime.Api.Maths.BlockPos)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_Decrement
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 286
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Decrements the coordinates of a BlockPos by 1.
  example: []
  syntax:
    content: public static BlockPos operator --(BlockPos rhs)
    parameters:
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The BlockPos to decrement.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the decremented coordinates.
    content.vb: Public Shared Function op_Decrement(rhs As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.op_Decrement*
  nameWithType.vb: BlockPos.op_Decrement(BlockPos)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.op_Decrement(OnixRuntime.Api.Maths.BlockPos)
  name.vb: op_Decrement(BlockPos)
- uid: OnixRuntime.Api.Maths.BlockPos.op_Multiply(OnixRuntime.Api.Maths.BlockPos,System.Int32)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_Multiply(OnixRuntime.Api.Maths.BlockPos,System.Int32)
  id: op_Multiply(OnixRuntime.Api.Maths.BlockPos,System.Int32)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator *(BlockPos, int)
  nameWithType: BlockPos.operator *(BlockPos, int)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator *(OnixRuntime.Api.Maths.BlockPos, int)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_Multiply
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 296
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Multiplies the coordinates of a BlockPos by an integer.
  example: []
  syntax:
    content: public static BlockPos operator *(BlockPos lhs, int rhs)
    parameters:
    - id: lhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The BlockPos.
    - id: rhs
      type: System.Int32
      description: The integer to multiply.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the multiplied coordinates.
    content.vb: Public Shared Operator *(lhs As BlockPos, rhs As Integer) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.op_Multiply*
  nameWithType.vb: BlockPos.*(BlockPos, Integer)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.*(OnixRuntime.Api.Maths.BlockPos, Integer)
  name.vb: '*(BlockPos, Integer)'
- uid: OnixRuntime.Api.Maths.BlockPos.op_Multiply(System.Int32,OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_Multiply(System.Int32,OnixRuntime.Api.Maths.BlockPos)
  id: op_Multiply(System.Int32,OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator *(int, BlockPos)
  nameWithType: BlockPos.operator *(int, BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator *(int, OnixRuntime.Api.Maths.BlockPos)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_Multiply
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 306
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Multiplies an integer by the coordinates of a BlockPos.
  example: []
  syntax:
    content: public static BlockPos operator *(int lhs, BlockPos rhs)
    parameters:
    - id: lhs
      type: System.Int32
      description: The integer to multiply.
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The BlockPos.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the multiplied coordinates.
    content.vb: Public Shared Operator *(lhs As Integer, rhs As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.op_Multiply*
  nameWithType.vb: BlockPos.*(Integer, BlockPos)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.*(Integer, OnixRuntime.Api.Maths.BlockPos)
  name.vb: '*(Integer, BlockPos)'
- uid: OnixRuntime.Api.Maths.BlockPos.op_Division(OnixRuntime.Api.Maths.BlockPos,System.Int32)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_Division(OnixRuntime.Api.Maths.BlockPos,System.Int32)
  id: op_Division(OnixRuntime.Api.Maths.BlockPos,System.Int32)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator /(BlockPos, int)
  nameWithType: BlockPos.operator /(BlockPos, int)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator /(OnixRuntime.Api.Maths.BlockPos, int)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_Division
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 316
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Divides the coordinates of a BlockPos by an integer.
  example: []
  syntax:
    content: public static BlockPos operator /(BlockPos lhs, int rhs)
    parameters:
    - id: lhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The BlockPos.
    - id: rhs
      type: System.Int32
      description: The integer to divide.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the divided coordinates.
    content.vb: Public Shared Operator /(lhs As BlockPos, rhs As Integer) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.op_Division*
  nameWithType.vb: BlockPos./(BlockPos, Integer)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos./(OnixRuntime.Api.Maths.BlockPos, Integer)
  name.vb: /(BlockPos, Integer)
- uid: OnixRuntime.Api.Maths.BlockPos.op_Division(System.Int32,OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_Division(System.Int32,OnixRuntime.Api.Maths.BlockPos)
  id: op_Division(System.Int32,OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator /(int, BlockPos)
  nameWithType: BlockPos.operator /(int, BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator /(int, OnixRuntime.Api.Maths.BlockPos)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_Division
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 326
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Divides an integer by the coordinates of a BlockPos.
  example: []
  syntax:
    content: public static BlockPos operator /(int lhs, BlockPos rhs)
    parameters:
    - id: lhs
      type: System.Int32
      description: The integer to divide.
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The BlockPos.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the divided coordinates.
    content.vb: Public Shared Operator /(lhs As Integer, rhs As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.op_Division*
  nameWithType.vb: BlockPos./(Integer, BlockPos)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos./(Integer, OnixRuntime.Api.Maths.BlockPos)
  name.vb: /(Integer, BlockPos)
- uid: OnixRuntime.Api.Maths.BlockPos.op_Modulus(OnixRuntime.Api.Maths.BlockPos,System.Int32)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_Modulus(OnixRuntime.Api.Maths.BlockPos,System.Int32)
  id: op_Modulus(OnixRuntime.Api.Maths.BlockPos,System.Int32)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator %(BlockPos, int)
  nameWithType: BlockPos.operator %(BlockPos, int)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator %(OnixRuntime.Api.Maths.BlockPos, int)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_Modulus
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 336
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Takes the modulus of the coordinates of a BlockPos by an integer.
  example: []
  syntax:
    content: public static BlockPos operator %(BlockPos lhs, int rhs)
    parameters:
    - id: lhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The BlockPos.
    - id: rhs
      type: System.Int32
      description: The integer to mod.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the modded coordinates.
    content.vb: Public Shared Operator Mod(lhs As BlockPos, rhs As Integer) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.op_Modulus*
  nameWithType.vb: BlockPos.Mod(BlockPos, Integer)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.Mod(OnixRuntime.Api.Maths.BlockPos, Integer)
  name.vb: Mod(BlockPos, Integer)
- uid: OnixRuntime.Api.Maths.BlockPos.op_Modulus(System.Int32,OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.op_Modulus(System.Int32,OnixRuntime.Api.Maths.BlockPos)
  id: op_Modulus(System.Int32,OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: operator %(int, BlockPos)
  nameWithType: BlockPos.operator %(int, BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.operator %(int, OnixRuntime.Api.Maths.BlockPos)
  type: Operator
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: op_Modulus
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 346
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Takes the modulus of an integer by the coordinates of a BlockPos.
  example: []
  syntax:
    content: public static BlockPos operator %(int lhs, BlockPos rhs)
    parameters:
    - id: lhs
      type: System.Int32
      description: The integer to mod.
    - id: rhs
      type: OnixRuntime.Api.Maths.BlockPos
      description: The BlockPos.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: A new BlockPos with the modded coordinates.
    content.vb: Public Shared Operator Mod(lhs As Integer, rhs As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.op_Modulus*
  nameWithType.vb: BlockPos.Mod(Integer, BlockPos)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.Mod(Integer, OnixRuntime.Api.Maths.BlockPos)
  name.vb: Mod(Integer, BlockPos)
- uid: OnixRuntime.Api.Maths.BlockPos.Zero
  commentId: P:OnixRuntime.Api.Maths.BlockPos.Zero
  id: Zero
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: BlockPos.Zero
  fullName: OnixRuntime.Api.Maths.BlockPos.Zero
  type: Property
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Zero
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 353
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Gets a BlockPos with all coordinates set to zero.
  example: []
  syntax:
    content: public static BlockPos Zero { get; }
    parameters: []
    return:
      type: OnixRuntime.Api.Maths.BlockPos
    content.vb: Public Shared ReadOnly Property Zero As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Zero*
- uid: OnixRuntime.Api.Maths.BlockPos.One
  commentId: P:OnixRuntime.Api.Maths.BlockPos.One
  id: One
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: One
  nameWithType: BlockPos.One
  fullName: OnixRuntime.Api.Maths.BlockPos.One
  type: Property
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: One
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 357
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Gets a BlockPos with all coordinates set to one.
  example: []
  syntax:
    content: public static BlockPos One { get; }
    parameters: []
    return:
      type: OnixRuntime.Api.Maths.BlockPos
    content.vb: Public Shared ReadOnly Property One As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.One*
- uid: OnixRuntime.Api.Maths.BlockPos.Up
  commentId: P:OnixRuntime.Api.Maths.BlockPos.Up
  id: Up
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Up
  nameWithType: BlockPos.Up
  fullName: OnixRuntime.Api.Maths.BlockPos.Up
  type: Property
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Up
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 362
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Gets a BlockPos that is one unit up from the current position.
  example: []
  syntax:
    content: public BlockPos Up { get; }
    parameters: []
    return:
      type: OnixRuntime.Api.Maths.BlockPos
    content.vb: Public ReadOnly Property Up As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Up*
- uid: OnixRuntime.Api.Maths.BlockPos.Down
  commentId: P:OnixRuntime.Api.Maths.BlockPos.Down
  id: Down
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Down
  nameWithType: BlockPos.Down
  fullName: OnixRuntime.Api.Maths.BlockPos.Down
  type: Property
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Down
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 366
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Gets a BlockPos that is one unit down from the current position.
  example: []
  syntax:
    content: public BlockPos Down { get; }
    parameters: []
    return:
      type: OnixRuntime.Api.Maths.BlockPos
    content.vb: Public ReadOnly Property Down As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Down*
- uid: OnixRuntime.Api.Maths.BlockPos.North
  commentId: P:OnixRuntime.Api.Maths.BlockPos.North
  id: North
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: North
  nameWithType: BlockPos.North
  fullName: OnixRuntime.Api.Maths.BlockPos.North
  type: Property
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: North
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 370
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Gets a BlockPos that is one unit north from the current position.
  example: []
  syntax:
    content: public BlockPos North { get; }
    parameters: []
    return:
      type: OnixRuntime.Api.Maths.BlockPos
    content.vb: Public ReadOnly Property North As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.North*
- uid: OnixRuntime.Api.Maths.BlockPos.South
  commentId: P:OnixRuntime.Api.Maths.BlockPos.South
  id: South
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: South
  nameWithType: BlockPos.South
  fullName: OnixRuntime.Api.Maths.BlockPos.South
  type: Property
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: South
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 374
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Gets a BlockPos that is one unit south from the current position.
  example: []
  syntax:
    content: public BlockPos South { get; }
    parameters: []
    return:
      type: OnixRuntime.Api.Maths.BlockPos
    content.vb: Public ReadOnly Property South As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.South*
- uid: OnixRuntime.Api.Maths.BlockPos.East
  commentId: P:OnixRuntime.Api.Maths.BlockPos.East
  id: East
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: East
  nameWithType: BlockPos.East
  fullName: OnixRuntime.Api.Maths.BlockPos.East
  type: Property
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: East
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 378
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Gets a BlockPos that is one unit east from the current position.
  example: []
  syntax:
    content: public BlockPos East { get; }
    parameters: []
    return:
      type: OnixRuntime.Api.Maths.BlockPos
    content.vb: Public ReadOnly Property East As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.East*
- uid: OnixRuntime.Api.Maths.BlockPos.West
  commentId: P:OnixRuntime.Api.Maths.BlockPos.West
  id: West
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: West
  nameWithType: BlockPos.West
  fullName: OnixRuntime.Api.Maths.BlockPos.West
  type: Property
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: West
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 382
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Gets a BlockPos that is one unit west from the current position.
  example: []
  syntax:
    content: public BlockPos West { get; }
    parameters: []
    return:
      type: OnixRuntime.Api.Maths.BlockPos
    content.vb: Public ReadOnly Property West As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.West*
- uid: OnixRuntime.Api.Maths.BlockPos.BoundingBox
  commentId: P:OnixRuntime.Api.Maths.BlockPos.BoundingBox
  id: BoundingBox
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: BoundingBox
  nameWithType: BlockPos.BoundingBox
  fullName: OnixRuntime.Api.Maths.BlockPos.BoundingBox
  type: Property
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: BoundingBox
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 386
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Gets the bounding box of the current BlockPos.
  example: []
  syntax:
    content: public BoundingBox BoundingBox { get; }
    parameters: []
    return:
      type: OnixRuntime.Api.Maths.BoundingBox
    content.vb: Public ReadOnly Property BoundingBox As BoundingBox
  overload: OnixRuntime.Api.Maths.BlockPos.BoundingBox*
- uid: OnixRuntime.Api.Maths.BlockPos.Next(OnixRuntime.Api.World.BlockFace,System.Int32)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Next(OnixRuntime.Api.World.BlockFace,System.Int32)
  id: Next(OnixRuntime.Api.World.BlockFace,System.Int32)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Next(BlockFace, int)
  nameWithType: BlockPos.Next(BlockFace, int)
  fullName: OnixRuntime.Api.Maths.BlockPos.Next(OnixRuntime.Api.World.BlockFace, int)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Next
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 393
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Gives you the next block position in the given direction.
  example: []
  syntax:
    content: public BlockPos Next(BlockFace face, int count = 0)
    parameters:
    - id: face
      type: OnixRuntime.Api.World.BlockFace
      description: The direction to get the position of.
    - id: count
      type: System.Int32
      description: How many blocks in that direction.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: ''
    content.vb: Public Function [Next](face As BlockFace, count As Integer = 0) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Next*
  nameWithType.vb: BlockPos.Next(BlockFace, Integer)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.Next(OnixRuntime.Api.World.BlockFace, Integer)
  name.vb: Next(BlockFace, Integer)
- uid: OnixRuntime.Api.Maths.BlockPos.Length
  commentId: P:OnixRuntime.Api.Maths.BlockPos.Length
  id: Length
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: BlockPos.Length
  fullName: OnixRuntime.Api.Maths.BlockPos.Length
  type: Property
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Length
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 406
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Gets the length of the BlockPos vector.
  example: []
  syntax:
    content: public int Length { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Length As Integer
  overload: OnixRuntime.Api.Maths.BlockPos.Length*
- uid: OnixRuntime.Api.Maths.BlockPos.Normalized
  commentId: P:OnixRuntime.Api.Maths.BlockPos.Normalized
  id: Normalized
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Normalized
  nameWithType: BlockPos.Normalized
  fullName: OnixRuntime.Api.Maths.BlockPos.Normalized
  type: Property
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Normalized
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 410
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Gets the normalized vector of the BlockPos.
  example: []
  syntax:
    content: public Vec3 Normalized { get; }
    parameters: []
    return:
      type: OnixRuntime.Api.Maths.Vec3
    content.vb: Public ReadOnly Property Normalized As Vec3
  overload: OnixRuntime.Api.Maths.BlockPos.Normalized*
- uid: OnixRuntime.Api.Maths.BlockPos.Center
  commentId: P:OnixRuntime.Api.Maths.BlockPos.Center
  id: Center
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Center
  nameWithType: BlockPos.Center
  fullName: OnixRuntime.Api.Maths.BlockPos.Center
  type: Property
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Center
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 414
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Gets the center of the BlockPos.
  example: []
  syntax:
    content: public Vec3 Center { get; }
    parameters: []
    return:
      type: OnixRuntime.Api.Maths.Vec3
    content.vb: Public ReadOnly Property Center As Vec3
  overload: OnixRuntime.Api.Maths.BlockPos.Center*
- uid: OnixRuntime.Api.Maths.BlockPos.Distance(OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Distance(OnixRuntime.Api.Maths.BlockPos)
  id: Distance(OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Distance(BlockPos)
  nameWithType: BlockPos.Distance(BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.Distance(OnixRuntime.Api.Maths.BlockPos)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Distance
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 421
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Calculates the distance to another BlockPos.
  example: []
  syntax:
    content: public float Distance(BlockPos other)
    parameters:
    - id: other
      type: OnixRuntime.Api.Maths.BlockPos
      description: The other BlockPos.
    return:
      type: System.Single
      description: The distance to the other BlockPos.
    content.vb: Public Function Distance(other As BlockPos) As Single
  overload: OnixRuntime.Api.Maths.BlockPos.Distance*
- uid: OnixRuntime.Api.Maths.BlockPos.Lerp(OnixRuntime.Api.Maths.BlockPos,System.Single)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Lerp(OnixRuntime.Api.Maths.BlockPos,System.Single)
  id: Lerp(OnixRuntime.Api.Maths.BlockPos,System.Single)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Lerp(BlockPos, float)
  nameWithType: BlockPos.Lerp(BlockPos, float)
  fullName: OnixRuntime.Api.Maths.BlockPos.Lerp(OnixRuntime.Api.Maths.BlockPos, float)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Lerp
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 431
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Linearly interpolates between this BlockPos and another BlockPos.
  example: []
  syntax:
    content: public BlockPos Lerp(BlockPos other, float t)
    parameters:
    - id: other
      type: OnixRuntime.Api.Maths.BlockPos
      description: The other BlockPos.
    - id: t
      type: System.Single
      description: The interpolation factor.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: The interpolated BlockPos.
    content.vb: Public Function Lerp(other As BlockPos, t As Single) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Lerp*
  nameWithType.vb: BlockPos.Lerp(BlockPos, Single)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.Lerp(OnixRuntime.Api.Maths.BlockPos, Single)
  name.vb: Lerp(BlockPos, Single)
- uid: OnixRuntime.Api.Maths.BlockPos.Min(OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Min(OnixRuntime.Api.Maths.BlockPos)
  id: Min(OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Min(BlockPos)
  nameWithType: BlockPos.Min(BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.Min(OnixRuntime.Api.Maths.BlockPos)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Min
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 440
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Returns the minimum of this BlockPos and another BlockPos.
  example: []
  syntax:
    content: public BlockPos Min(BlockPos other)
    parameters:
    - id: other
      type: OnixRuntime.Api.Maths.BlockPos
      description: The other BlockPos.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: The minimum BlockPos.
    content.vb: Public Function Min(other As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Min*
- uid: OnixRuntime.Api.Maths.BlockPos.Max(OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Max(OnixRuntime.Api.Maths.BlockPos)
  id: Max(OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Max(BlockPos)
  nameWithType: BlockPos.Max(BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.Max(OnixRuntime.Api.Maths.BlockPos)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Max
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 449
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Returns the maximum of this BlockPos and another BlockPos.
  example: []
  syntax:
    content: public BlockPos Max(BlockPos other)
    parameters:
    - id: other
      type: OnixRuntime.Api.Maths.BlockPos
      description: The other BlockPos.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: The maximum BlockPos.
    content.vb: Public Function Max(other As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Max*
- uid: OnixRuntime.Api.Maths.BlockPos.Clamp(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Clamp(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  id: Clamp(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Clamp(BlockPos, BlockPos)
  nameWithType: BlockPos.Clamp(BlockPos, BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.Clamp(OnixRuntime.Api.Maths.BlockPos, OnixRuntime.Api.Maths.BlockPos)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Clamp
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 459
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Clamps this BlockPos between two other BlockPos values.
  example: []
  syntax:
    content: public BlockPos Clamp(BlockPos min, BlockPos max)
    parameters:
    - id: min
      type: OnixRuntime.Api.Maths.BlockPos
      description: The minimum BlockPos.
    - id: max
      type: OnixRuntime.Api.Maths.BlockPos
      description: The maximum BlockPos.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: The clamped BlockPos.
    content.vb: Public Function Clamp(min As BlockPos, max As BlockPos) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Clamp*
- uid: OnixRuntime.Api.Maths.BlockPos.Min(System.Int32)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Min(System.Int32)
  id: Min(System.Int32)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Min(int)
  nameWithType: BlockPos.Min(int)
  fullName: OnixRuntime.Api.Maths.BlockPos.Min(int)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Min
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 468
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Returns the minimum of this BlockPos and an integer.
  example: []
  syntax:
    content: public BlockPos Min(int other)
    parameters:
    - id: other
      type: System.Int32
      description: The integer.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: The minimum BlockPos.
    content.vb: Public Function Min(other As Integer) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Min*
  nameWithType.vb: BlockPos.Min(Integer)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.Min(Integer)
  name.vb: Min(Integer)
- uid: OnixRuntime.Api.Maths.BlockPos.Max(System.Int32)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Max(System.Int32)
  id: Max(System.Int32)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Max(int)
  nameWithType: BlockPos.Max(int)
  fullName: OnixRuntime.Api.Maths.BlockPos.Max(int)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Max
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 477
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Returns the maximum of this BlockPos and an integer.
  example: []
  syntax:
    content: public BlockPos Max(int other)
    parameters:
    - id: other
      type: System.Int32
      description: The integer.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: The maximum BlockPos.
    content.vb: Public Function Max(other As Integer) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Max*
  nameWithType.vb: BlockPos.Max(Integer)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.Max(Integer)
  name.vb: Max(Integer)
- uid: OnixRuntime.Api.Maths.BlockPos.Clamp(System.Int32,System.Int32)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Clamp(System.Int32,System.Int32)
  id: Clamp(System.Int32,System.Int32)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Clamp(int, int)
  nameWithType: BlockPos.Clamp(int, int)
  fullName: OnixRuntime.Api.Maths.BlockPos.Clamp(int, int)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Clamp
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 487
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Clamps this BlockPos between two integer values.
  example: []
  syntax:
    content: public BlockPos Clamp(int min, int max)
    parameters:
    - id: min
      type: System.Int32
      description: The minimum integer.
    - id: max
      type: System.Int32
      description: The maximum integer.
    return:
      type: OnixRuntime.Api.Maths.BlockPos
      description: The clamped BlockPos.
    content.vb: Public Function Clamp(min As Integer, max As Integer) As BlockPos
  overload: OnixRuntime.Api.Maths.BlockPos.Clamp*
  nameWithType.vb: BlockPos.Clamp(Integer, Integer)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.Clamp(Integer, Integer)
  name.vb: Clamp(Integer, Integer)
- uid: OnixRuntime.Api.Maths.BlockPos.ToString
  commentId: M:OnixRuntime.Api.Maths.BlockPos.ToString
  id: ToString
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: BlockPos.ToString()
  fullName: OnixRuntime.Api.Maths.BlockPos.ToString()
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: ToString
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 495
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Returns a string representation of the BlockPos.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representation of the BlockPos.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.ValueType.ToString
  overload: OnixRuntime.Api.Maths.BlockPos.ToString*
- uid: OnixRuntime.Api.Maths.BlockPos.ToString(System.String)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.ToString(System.String)
  id: ToString(System.String)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: ToString(string)
  nameWithType: BlockPos.ToString(string)
  fullName: OnixRuntime.Api.Maths.BlockPos.ToString(string)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: ToString
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 505
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Returns a formatted string representation of the BlockPos.
  example: []
  syntax:
    content: public string ToString(string format)
    parameters:
    - id: format
      type: System.String
      description: The format string.
    return:
      type: System.String
      description: A formatted string representation of the BlockPos.
    content.vb: Public Function ToString(format As String) As String
  overload: OnixRuntime.Api.Maths.BlockPos.ToString*
  nameWithType.vb: BlockPos.ToString(String)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.ToString(String)
  name.vb: ToString(String)
- uid: OnixRuntime.Api.Maths.BlockPos.Equals(OnixRuntime.Api.Maths.BlockPos)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Equals(OnixRuntime.Api.Maths.BlockPos)
  id: Equals(OnixRuntime.Api.Maths.BlockPos)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Equals(BlockPos)
  nameWithType: BlockPos.Equals(BlockPos)
  fullName: OnixRuntime.Api.Maths.BlockPos.Equals(OnixRuntime.Api.Maths.BlockPos)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Equals
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 514
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Checks if this BlockPos is equal to another BlockPos.
  example: []
  syntax:
    content: public bool Equals(BlockPos other)
    parameters:
    - id: other
      type: OnixRuntime.Api.Maths.BlockPos
      description: The other BlockPos.
    return:
      type: System.Boolean
      description: True if the BlockPos values are equal, otherwise false.
    content.vb: Public Function Equals(other As BlockPos) As Boolean
  overload: OnixRuntime.Api.Maths.BlockPos.Equals*
  implements:
  - System.IEquatable{OnixRuntime.Api.Maths.BlockPos}.Equals(OnixRuntime.Api.Maths.BlockPos)
- uid: OnixRuntime.Api.Maths.BlockPos.Equals(System.Object)
  commentId: M:OnixRuntime.Api.Maths.BlockPos.Equals(System.Object)
  id: Equals(System.Object)
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: Equals(object?)
  nameWithType: BlockPos.Equals(object?)
  fullName: OnixRuntime.Api.Maths.BlockPos.Equals(object?)
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: Equals
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 523
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Checks if this BlockPos is equal to another object.
  example: []
  syntax:
    content: public override bool Equals(object? obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare.
    return:
      type: System.Boolean
      description: True if the object is a BlockPos and the values are equal, otherwise false.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: OnixRuntime.Api.Maths.BlockPos.Equals*
  nameWithType.vb: BlockPos.Equals(Object)
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.Equals(Object)
  name.vb: Equals(Object)
- uid: OnixRuntime.Api.Maths.BlockPos.GetHashCode
  commentId: M:OnixRuntime.Api.Maths.BlockPos.GetHashCode
  id: GetHashCode
  parent: OnixRuntime.Api.Maths.BlockPos
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: BlockPos.GetHashCode()
  fullName: OnixRuntime.Api.Maths.BlockPos.GetHashCode()
  type: Method
  source:
    remote:
      path: OnixRuntime/Api/Maths/BlockPos.cs
      branch: master
      repo: https://github.com/OnixClient/OnixDotnetRuntime
    id: GetHashCode
    path: ../../../../../../../Users/jqms/source/repos/OnixDotnetRuntime/OnixRuntime/Api/Maths/BlockPos.cs
    startLine: 534
  assemblies:
  - OnixRuntime
  namespace: OnixRuntime.Api.Maths
  summary: Returns the hash code for this BlockPos.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: The hash code for this BlockPos.
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: OnixRuntime.Api.Maths.BlockPos.GetHashCode*
references:
- uid: OnixRuntime.Api.Maths
  commentId: N:OnixRuntime.Api.Maths
  href: OnixRuntime.html
  name: OnixRuntime.Api.Maths
  nameWithType: OnixRuntime.Api.Maths
  fullName: OnixRuntime.Api.Maths
  spec.csharp:
  - uid: OnixRuntime
    name: OnixRuntime
    href: OnixRuntime.html
  - name: .
  - uid: OnixRuntime.Api
    name: Api
    href: OnixRuntime.Api.html
  - name: .
  - uid: OnixRuntime.Api.Maths
    name: Maths
    href: OnixRuntime.Api.Maths.html
  spec.vb:
  - uid: OnixRuntime
    name: OnixRuntime
    href: OnixRuntime.html
  - name: .
  - uid: OnixRuntime.Api
    name: Api
    href: OnixRuntime.Api.html
  - name: .
  - uid: OnixRuntime.Api.Maths
    name: Maths
    href: OnixRuntime.Api.Maths.html
- uid: System.IEquatable{OnixRuntime.Api.Maths.BlockPos}
  commentId: T:System.IEquatable{OnixRuntime.Api.Maths.BlockPos}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<BlockPos>
  nameWithType: IEquatable<BlockPos>
  fullName: System.IEquatable<OnixRuntime.Api.Maths.BlockPos>
  nameWithType.vb: IEquatable(Of BlockPos)
  fullName.vb: System.IEquatable(Of OnixRuntime.Api.Maths.BlockPos)
  name.vb: IEquatable(Of BlockPos)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: OnixRuntime.Api.Maths.BlockPos
    name: BlockPos
    href: OnixRuntime.Api.Maths.BlockPos.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: OnixRuntime.Api.Maths.BlockPos
    name: BlockPos
    href: OnixRuntime.Api.Maths.BlockPos.html
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: OnixRuntime.Api.Maths.BlockPos
  commentId: T:OnixRuntime.Api.Maths.BlockPos
  parent: OnixRuntime.Api.Maths
  href: OnixRuntime.Api.Maths.BlockPos.html
  name: BlockPos
  nameWithType: BlockPos
  fullName: OnixRuntime.Api.Maths.BlockPos
- uid: OnixRuntime.Api.Maths.BlockPos.#ctor*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.#ctor
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos__ctor_System_Int32_System_Int32_System_Int32_
  name: BlockPos
  nameWithType: BlockPos.BlockPos
  fullName: OnixRuntime.Api.Maths.BlockPos.BlockPos
  nameWithType.vb: BlockPos.New
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.New
  name.vb: New
- uid: OnixRuntime.Api.Maths.Vec3
  commentId: T:OnixRuntime.Api.Maths.Vec3
  parent: OnixRuntime.Api.Maths
  href: OnixRuntime.Api.Maths.Vec3.html
  name: Vec3
  nameWithType: Vec3
  fullName: OnixRuntime.Api.Maths.Vec3
- uid: OnixRuntime.Api.Maths.BlockPos.Add*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.Add
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_Add_System_Int32_System_Int32_System_Int32_
  name: Add
  nameWithType: BlockPos.Add
  fullName: OnixRuntime.Api.Maths.BlockPos.Add
- uid: OnixRuntime.Api.Maths.BlockPos.op_Addition*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.op_Addition
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_Addition_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
  name: operator +
  nameWithType: BlockPos.operator +
  fullName: OnixRuntime.Api.Maths.BlockPos.operator +
  nameWithType.vb: BlockPos.+
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.+
  name.vb: +
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OnixRuntime.Api.Maths.BlockPos.op_Addition*
    name: +
    href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_Addition_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
- uid: OnixRuntime.Api.Maths.BlockPos.Sub*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.Sub
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_Sub_System_Int32_System_Int32_System_Int32_
  name: Sub
  nameWithType: BlockPos.Sub
  fullName: OnixRuntime.Api.Maths.BlockPos.Sub
- uid: OnixRuntime.Api.Maths.BlockPos.op_Subtraction*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.op_Subtraction
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_Subtraction_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
  name: operator -
  nameWithType: BlockPos.operator -
  fullName: OnixRuntime.Api.Maths.BlockPos.operator -
  nameWithType.vb: BlockPos.-
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OnixRuntime.Api.Maths.BlockPos.op_Subtraction*
    name: '-'
    href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_Subtraction_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
- uid: OnixRuntime.Api.Maths.BlockPos.Mul*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.Mul
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_Mul_System_Int32_System_Int32_System_Int32_
  name: Mul
  nameWithType: BlockPos.Mul
  fullName: OnixRuntime.Api.Maths.BlockPos.Mul
- uid: OnixRuntime.Api.Maths.BlockPos.op_Multiply*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.op_Multiply
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_Multiply_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
  name: operator *
  nameWithType: BlockPos.operator *
  fullName: OnixRuntime.Api.Maths.BlockPos.operator *
  nameWithType.vb: BlockPos.*
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.*
  name.vb: '*'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OnixRuntime.Api.Maths.BlockPos.op_Multiply*
    name: '*'
    href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_Multiply_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
- uid: OnixRuntime.Api.Maths.BlockPos.Div*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.Div
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_Div_System_Int32_System_Int32_System_Int32_
  name: Div
  nameWithType: BlockPos.Div
  fullName: OnixRuntime.Api.Maths.BlockPos.Div
- uid: OnixRuntime.Api.Maths.BlockPos.op_Division*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.op_Division
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_Division_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
  name: operator /
  nameWithType: BlockPos.operator /
  fullName: OnixRuntime.Api.Maths.BlockPos.operator /
  nameWithType.vb: BlockPos./
  fullName.vb: OnixRuntime.Api.Maths.BlockPos./
  name.vb: /
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OnixRuntime.Api.Maths.BlockPos.op_Division*
    name: /
    href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_Division_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
- uid: OnixRuntime.Api.Maths.BlockPos.Mod*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.Mod
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_Mod_System_Int32_System_Int32_System_Int32_
  name: Mod
  nameWithType: BlockPos.Mod
  fullName: OnixRuntime.Api.Maths.BlockPos.Mod
- uid: OnixRuntime.Api.Maths.BlockPos.op_Modulus*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.op_Modulus
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_Modulus_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
  name: operator %
  nameWithType: BlockPos.operator %
  fullName: OnixRuntime.Api.Maths.BlockPos.operator %
  nameWithType.vb: BlockPos.Mod
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.Mod
  name.vb: Mod
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OnixRuntime.Api.Maths.BlockPos.op_Modulus*
    name: '%'
    href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_Modulus_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
- uid: OnixRuntime.Api.Maths.BlockPos.op_Equality*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.op_Equality
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_Equality_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
  name: operator ==
  nameWithType: BlockPos.operator ==
  fullName: OnixRuntime.Api.Maths.BlockPos.operator ==
  nameWithType.vb: BlockPos.=
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OnixRuntime.Api.Maths.BlockPos.op_Equality*
    name: ==
    href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_Equality_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: OnixRuntime.Api.Maths.BlockPos.op_Inequality*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.op_Inequality
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_Inequality_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
  name: operator !=
  nameWithType: BlockPos.operator !=
  fullName: OnixRuntime.Api.Maths.BlockPos.operator !=
  nameWithType.vb: BlockPos.<>
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OnixRuntime.Api.Maths.BlockPos.op_Inequality*
    name: '!='
    href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_Inequality_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
- uid: OnixRuntime.Api.Maths.BlockPos.op_GreaterThan*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.op_GreaterThan
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_GreaterThan_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
  name: operator >
  nameWithType: BlockPos.operator >
  fullName: OnixRuntime.Api.Maths.BlockPos.operator >
  nameWithType.vb: BlockPos.>
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.>
  name.vb: '>'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OnixRuntime.Api.Maths.BlockPos.op_GreaterThan*
    name: '>'
    href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_GreaterThan_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
- uid: OnixRuntime.Api.Maths.BlockPos.op_LessThan*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.op_LessThan
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_LessThan_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
  name: operator <
  nameWithType: BlockPos.operator <
  fullName: OnixRuntime.Api.Maths.BlockPos.operator <
  nameWithType.vb: BlockPos.<
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.<
  name.vb: <
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OnixRuntime.Api.Maths.BlockPos.op_LessThan*
    name: <
    href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_LessThan_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
- uid: OnixRuntime.Api.Maths.BlockPos.op_GreaterThanOrEqual*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.op_GreaterThanOrEqual
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_GreaterThanOrEqual_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
  name: operator >=
  nameWithType: BlockPos.operator >=
  fullName: OnixRuntime.Api.Maths.BlockPos.operator >=
  nameWithType.vb: BlockPos.>=
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.>=
  name.vb: '>='
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OnixRuntime.Api.Maths.BlockPos.op_GreaterThanOrEqual*
    name: '>='
    href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_GreaterThanOrEqual_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
- uid: OnixRuntime.Api.Maths.BlockPos.op_LessThanOrEqual*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.op_LessThanOrEqual
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_LessThanOrEqual_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
  name: operator <=
  nameWithType: BlockPos.operator <=
  fullName: OnixRuntime.Api.Maths.BlockPos.operator <=
  nameWithType.vb: BlockPos.<=
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.<=
  name.vb: <=
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OnixRuntime.Api.Maths.BlockPos.op_LessThanOrEqual*
    name: <=
    href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_LessThanOrEqual_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
- uid: OnixRuntime.Api.Maths.BlockPos.op_UnaryNegation*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.op_UnaryNegation
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_UnaryNegation_OnixRuntime_Api_Maths_BlockPos_
  name: operator -
  nameWithType: BlockPos.operator -
  fullName: OnixRuntime.Api.Maths.BlockPos.operator -
  nameWithType.vb: BlockPos.-
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OnixRuntime.Api.Maths.BlockPos.op_UnaryNegation*
    name: '-'
    href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_UnaryNegation_OnixRuntime_Api_Maths_BlockPos_
- uid: OnixRuntime.Api.Maths.BlockPos.op_UnaryPlus*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.op_UnaryPlus
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_UnaryPlus_OnixRuntime_Api_Maths_BlockPos_
  name: operator +
  nameWithType: BlockPos.operator +
  fullName: OnixRuntime.Api.Maths.BlockPos.operator +
  nameWithType.vb: BlockPos.+
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.+
  name.vb: +
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OnixRuntime.Api.Maths.BlockPos.op_UnaryPlus*
    name: +
    href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_UnaryPlus_OnixRuntime_Api_Maths_BlockPos_
- uid: OnixRuntime.Api.Maths.BlockPos.op_Increment*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.op_Increment
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_Increment_OnixRuntime_Api_Maths_BlockPos_
  name: operator ++
  nameWithType: BlockPos.operator ++
  fullName: OnixRuntime.Api.Maths.BlockPos.operator ++
  nameWithType.vb: BlockPos.op_Increment
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.op_Increment
  name.vb: op_Increment
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OnixRuntime.Api.Maths.BlockPos.op_Increment*
    name: ++
    href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_Increment_OnixRuntime_Api_Maths_BlockPos_
- uid: OnixRuntime.Api.Maths.BlockPos.op_Decrement*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.op_Decrement
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_Decrement_OnixRuntime_Api_Maths_BlockPos_
  name: operator --
  nameWithType: BlockPos.operator --
  fullName: OnixRuntime.Api.Maths.BlockPos.operator --
  nameWithType.vb: BlockPos.op_Decrement
  fullName.vb: OnixRuntime.Api.Maths.BlockPos.op_Decrement
  name.vb: op_Decrement
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OnixRuntime.Api.Maths.BlockPos.op_Decrement*
    name: --
    href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_op_Decrement_OnixRuntime_Api_Maths_BlockPos_
- uid: OnixRuntime.Api.Maths.BlockPos.Zero*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.Zero
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_Zero
  name: Zero
  nameWithType: BlockPos.Zero
  fullName: OnixRuntime.Api.Maths.BlockPos.Zero
- uid: OnixRuntime.Api.Maths.BlockPos.One*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.One
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_One
  name: One
  nameWithType: BlockPos.One
  fullName: OnixRuntime.Api.Maths.BlockPos.One
- uid: OnixRuntime.Api.Maths.BlockPos.Up*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.Up
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_Up
  name: Up
  nameWithType: BlockPos.Up
  fullName: OnixRuntime.Api.Maths.BlockPos.Up
- uid: OnixRuntime.Api.Maths.BlockPos.Down*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.Down
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_Down
  name: Down
  nameWithType: BlockPos.Down
  fullName: OnixRuntime.Api.Maths.BlockPos.Down
- uid: OnixRuntime.Api.Maths.BlockPos.North*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.North
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_North
  name: North
  nameWithType: BlockPos.North
  fullName: OnixRuntime.Api.Maths.BlockPos.North
- uid: OnixRuntime.Api.Maths.BlockPos.South*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.South
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_South
  name: South
  nameWithType: BlockPos.South
  fullName: OnixRuntime.Api.Maths.BlockPos.South
- uid: OnixRuntime.Api.Maths.BlockPos.East*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.East
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_East
  name: East
  nameWithType: BlockPos.East
  fullName: OnixRuntime.Api.Maths.BlockPos.East
- uid: OnixRuntime.Api.Maths.BlockPos.West*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.West
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_West
  name: West
  nameWithType: BlockPos.West
  fullName: OnixRuntime.Api.Maths.BlockPos.West
- uid: OnixRuntime.Api.Maths.BlockPos.BoundingBox*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.BoundingBox
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_BoundingBox
  name: BoundingBox
  nameWithType: BlockPos.BoundingBox
  fullName: OnixRuntime.Api.Maths.BlockPos.BoundingBox
- uid: OnixRuntime.Api.Maths.BoundingBox
  commentId: T:OnixRuntime.Api.Maths.BoundingBox
  parent: OnixRuntime.Api.Maths
  href: OnixRuntime.Api.Maths.BoundingBox.html
  name: BoundingBox
  nameWithType: BoundingBox
  fullName: OnixRuntime.Api.Maths.BoundingBox
- uid: OnixRuntime.Api.Maths.BlockPos.Next*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.Next
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_Next_OnixRuntime_Api_World_BlockFace_System_Int32_
  name: Next
  nameWithType: BlockPos.Next
  fullName: OnixRuntime.Api.Maths.BlockPos.Next
- uid: OnixRuntime.Api.World.BlockFace
  commentId: T:OnixRuntime.Api.World.BlockFace
  parent: OnixRuntime.Api.World
  href: OnixRuntime.Api.World.BlockFace.html
  name: BlockFace
  nameWithType: BlockFace
  fullName: OnixRuntime.Api.World.BlockFace
- uid: OnixRuntime.Api.World
  commentId: N:OnixRuntime.Api.World
  href: OnixRuntime.html
  name: OnixRuntime.Api.World
  nameWithType: OnixRuntime.Api.World
  fullName: OnixRuntime.Api.World
  spec.csharp:
  - uid: OnixRuntime
    name: OnixRuntime
    href: OnixRuntime.html
  - name: .
  - uid: OnixRuntime.Api
    name: Api
    href: OnixRuntime.Api.html
  - name: .
  - uid: OnixRuntime.Api.World
    name: World
    href: OnixRuntime.Api.World.html
  spec.vb:
  - uid: OnixRuntime
    name: OnixRuntime
    href: OnixRuntime.html
  - name: .
  - uid: OnixRuntime.Api
    name: Api
    href: OnixRuntime.Api.html
  - name: .
  - uid: OnixRuntime.Api.World
    name: World
    href: OnixRuntime.Api.World.html
- uid: OnixRuntime.Api.Maths.BlockPos.Length*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.Length
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_Length
  name: Length
  nameWithType: BlockPos.Length
  fullName: OnixRuntime.Api.Maths.BlockPos.Length
- uid: OnixRuntime.Api.Maths.BlockPos.Normalized*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.Normalized
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_Normalized
  name: Normalized
  nameWithType: BlockPos.Normalized
  fullName: OnixRuntime.Api.Maths.BlockPos.Normalized
- uid: OnixRuntime.Api.Maths.BlockPos.Center*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.Center
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_Center
  name: Center
  nameWithType: BlockPos.Center
  fullName: OnixRuntime.Api.Maths.BlockPos.Center
- uid: OnixRuntime.Api.Maths.BlockPos.Distance*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.Distance
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_Distance_OnixRuntime_Api_Maths_BlockPos_
  name: Distance
  nameWithType: BlockPos.Distance
  fullName: OnixRuntime.Api.Maths.BlockPos.Distance
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: OnixRuntime.Api.Maths.BlockPos.Lerp*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.Lerp
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_Lerp_OnixRuntime_Api_Maths_BlockPos_System_Single_
  name: Lerp
  nameWithType: BlockPos.Lerp
  fullName: OnixRuntime.Api.Maths.BlockPos.Lerp
- uid: OnixRuntime.Api.Maths.BlockPos.Min*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.Min
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_Min_OnixRuntime_Api_Maths_BlockPos_
  name: Min
  nameWithType: BlockPos.Min
  fullName: OnixRuntime.Api.Maths.BlockPos.Min
- uid: OnixRuntime.Api.Maths.BlockPos.Max*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.Max
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_Max_OnixRuntime_Api_Maths_BlockPos_
  name: Max
  nameWithType: BlockPos.Max
  fullName: OnixRuntime.Api.Maths.BlockPos.Max
- uid: OnixRuntime.Api.Maths.BlockPos.Clamp*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.Clamp
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_Clamp_OnixRuntime_Api_Maths_BlockPos_OnixRuntime_Api_Maths_BlockPos_
  name: Clamp
  nameWithType: BlockPos.Clamp
  fullName: OnixRuntime.Api.Maths.BlockPos.Clamp
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: OnixRuntime.Api.Maths.BlockPos.ToString*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.ToString
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_ToString
  name: ToString
  nameWithType: BlockPos.ToString
  fullName: OnixRuntime.Api.Maths.BlockPos.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: OnixRuntime.Api.Maths.BlockPos.Equals*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.Equals
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_Equals_OnixRuntime_Api_Maths_BlockPos_
  name: Equals
  nameWithType: BlockPos.Equals
  fullName: OnixRuntime.Api.Maths.BlockPos.Equals
- uid: System.IEquatable{OnixRuntime.Api.Maths.BlockPos}.Equals(OnixRuntime.Api.Maths.BlockPos)
  commentId: M:System.IEquatable{OnixRuntime.Api.Maths.BlockPos}.Equals(OnixRuntime.Api.Maths.BlockPos)
  parent: System.IEquatable{OnixRuntime.Api.Maths.BlockPos}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(BlockPos)
  nameWithType: IEquatable<BlockPos>.Equals(BlockPos)
  fullName: System.IEquatable<OnixRuntime.Api.Maths.BlockPos>.Equals(OnixRuntime.Api.Maths.BlockPos)
  nameWithType.vb: IEquatable(Of BlockPos).Equals(BlockPos)
  fullName.vb: System.IEquatable(Of OnixRuntime.Api.Maths.BlockPos).Equals(OnixRuntime.Api.Maths.BlockPos)
  spec.csharp:
  - uid: System.IEquatable{OnixRuntime.Api.Maths.BlockPos}.Equals(OnixRuntime.Api.Maths.BlockPos)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: OnixRuntime.Api.Maths.BlockPos
    name: BlockPos
    href: OnixRuntime.Api.Maths.BlockPos.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{OnixRuntime.Api.Maths.BlockPos}.Equals(OnixRuntime.Api.Maths.BlockPos)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: OnixRuntime.Api.Maths.BlockPos
    name: BlockPos
    href: OnixRuntime.Api.Maths.BlockPos.html
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: OnixRuntime.Api.Maths.BlockPos.GetHashCode*
  commentId: Overload:OnixRuntime.Api.Maths.BlockPos.GetHashCode
  href: OnixRuntime.Api.Maths.BlockPos.html#OnixRuntime_Api_Maths_BlockPos_GetHashCode
  name: GetHashCode
  nameWithType: BlockPos.GetHashCode
  fullName: OnixRuntime.Api.Maths.BlockPos.GetHashCode
